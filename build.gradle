plugins {
	id 'fabric-loom' version "$fabric_loom_version" apply false
}

allprojects {
	apply plugin: 'fabric-loom'
	apply plugin: 'dev.lazurite.abacus'

	version rayon_version

	processResources {
		inputs.property 'version', version

		filesMatching 'fabric.mod.json', {
			expand 'version': version
		}
	}
}

subprojects {
	apply plugin: 'maven-publish'

	repositories {
		maven {
			name 'Lazurite'
			url 'https://lazurite.dev/releases'
		}
	}

	dependencies {
		modImplementation fabricApi.module('fabric-api-base', fabric_api_version)
		modImplementation fabricApi.module('fabric-rendering-v1', fabric_api_version)
		modImplementation fabricApi.module('fabric-networking-api-v1', fabric_api_version)
		modImplementation fabricApi.module('fabric-lifecycle-events-v1', fabric_api_version)
		modImplementation fabricApi.module('fabric-object-builder-api-v1', fabric_api_version)

		api "com.github.stephengold:Libbulletjme:$libbulletjme_version"

		modApi "dev.lazurite:transporter:$transporter_version"
		modApi "dev.lazurite:toolbox:$toolbox_version"
	}

	publishing {
		repositories {
			maven {
				name 'Lazurite'
				url 'https://lazurite.dev/releases'

				credentials {
					username property('publish.lazurite.alias')
					password property('publish.lazurite.secret')
				}
			}
		}
	}

	// apply testmod configuration and core dependency to non-core subprojects
	if (name != 'rayon-core') {
		sourceSets {
			testmod {
				compileClasspath += main.compileClasspath
				runtimeClasspath += main.runtimeClasspath
			}
		}

		processTestmodResources {
			inputs.property 'version', version

			filesMatching 'fabric.mod.json', {
				expand 'version': version
			}
		}

		dependencies {
			api project(path: ':rayon-core:common', configuration: 'namedElements')
			testmodImplementation sourceSets.main.output
		}
	}
}