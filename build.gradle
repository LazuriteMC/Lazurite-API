buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.+'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version "5.2.0"
}

apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'java-library'
apply plugin: 'com.github.johnrengelman.shadow'

def rootName = rootProject.archives_base_name
def rootVersion = rootProject.mod_version
def rootGroup = rootProject.maven_group

def parchmentDate = '2021.10.10'

allprojects { project ->
    apply plugin: 'net.minecraftforge.gradle'
    apply plugin: 'org.parchmentmc.librarian.forgegradle'
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'
    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'org.spongepowered.mixin'


    archivesBaseName = project.archivesBaseName
    version = rootVersion
    group = rootGroup


    java.toolchain.languageVersion = JavaLanguageVersion.of(16)

    println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
    minecraft {
        mappings channel: 'parchment', version: parchmentDate + '-1.17.1'

        runs {
            client {
                workingDirectory project.file('run')

                property 'forge.logging.markers', 'REGISTRIES'

                property 'forge.logging.console.level', 'debug'

                mods {
                    "${archivesBaseName}" {
                        source sourceSets.main
                    }
                }
            }

            server {
                workingDirectory project.file('run')

                property 'forge.logging.markers', 'REGISTRIES'

                property 'forge.logging.console.level', 'debug'

                mods {
                    "${archivesBaseName}" {
                        source sourceSets.main
                    }
                }
            }

            data {
                workingDirectory project.file('run')

                property 'forge.logging.markers', 'REGISTRIES'

                property 'forge.logging.console.level', 'debug'

                args '--mod', "${project.archivesBaseName}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

                mods {
                    "${archivesBaseName}" {
                        source sourceSets.main
                    }
                }
            }
        }
    }

    configurations {
        library
        implementation.extendsFrom library
    }
    minecraft.runs.all {
        lazyToken('minecraft_classpath') {
            configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
        }
    }

    sourceSets.main.resources { srcDir 'src/generated/resources' }

    sourceSets {
        testmod {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
        }
    }

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        minecraft 'net.minecraftforge:forge:1.17.1-37.0.82'
        // Bullet
        library "com.github.stephengold:Libbulletjme:${rootProject.libbulletjme_version}"
        shadow "com.github.stephengold:Libbulletjme:${rootProject.libbulletjme_version}"

        // Transporter
        implementation "dev.lazurite:transporter:${rootProject.transporter_version}"

        // Lazurite Toolbox
        implementation "dev.lazurite:toolbox:${rootProject.toolbox_version}"

        annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
    }

    mixin {
        // MixinGradle Settings
        add sourceSets.main, "${project.archivesBaseName}.mixins.refmap.json"
        config "${project.archivesBaseName}.mixins.json"
        /*debug.verbose = true
        debug.export = true
        dumpTargetOnFailure = true*/
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allSource
    }

    java {
        withSourcesJar()
    }

    jar {
        manifest {
            attributes([
                    "Specification-Title"     : project.group,
                    "Specification-Vendor"    : "examplemodsareus",
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : "examplemodsareus",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }
    jar.finalizedBy('reobfJar')

    dependencies {
        testmodImplementation project.sourceSets.main.output
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact jar
            }
        }
        repositories {
            maven {
                url "file://${project.projectDir}/mcmodsrepo"
            }
        }
    }
}


