plugins {
	id 'com.github.johnrengelman.shadow' version "5.2.0"
	id 'fabric-loom' version '0.9-SNAPSHOT'
	id 'maven-publish'
}

allprojects { project ->
	apply plugin: 'com.github.johnrengelman.shadow'
	apply plugin: 'fabric-loom'
	apply plugin: 'maven-publish'
	apply plugin: 'java-library'

	sourceCompatibility = JavaVersion.VERSION_16
	targetCompatibility = JavaVersion.VERSION_16

	version = project.mod_version
	group = project.maven_group

	repositories {
		maven { url "https://maven.fabricmc.net/" }
		maven { url "https://lazurite.dev/releases" }
	}

	dependencies {
		minecraft "com.mojang:minecraft:${project.minecraft_version}"
		mappings minecraft.officialMojangMappings()
		modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
		modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

		// Bullet
		implementation "com.github.stephengold:Libbulletjme:${project.libbulletjme_version}"
		shadow "com.github.stephengold:Libbulletjme:${project.libbulletjme_version}"

		// Transporter
		modImplementation "dev.lazurite:transporter:${project.transporter_version}"
		include "dev.lazurite:transporter:${project.transporter_version}"

		// Lazurite Toolbox
		modApi "dev.lazurite:toolbox:${project.toolbox_version}"
		include "dev.lazurite:toolbox:${project.toolbox_version}"
	}

	sourceSets {
		testmod {
			compileClasspath += main.compileClasspath
			runtimeClasspath += main.runtimeClasspath
		}
	}

	processResources {
		inputs.property "version", project.version

		filesMatching("fabric.mod.json") {
			expand "version": project.version
		}
	}

	tasks.withType(JavaCompile).configureEach {
		it.options.encoding = "UTF-8"
		it.options.release = 16
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = "sources"
		from sourceSets.main.allSource
	}

	java {
		withSourcesJar()
	}

	jar {
		from("LICENSE") {
			rename { "${it}_${project.archivesBaseName}"}
		}
	}

	dependencies {
		testmodImplementation project.sourceSets.main.output
	}
}

subprojects {
	task remapMavenJar(type: Copy, dependsOn: remapJar) {
		afterEvaluate {
			from("${project.buildDir}/libs/$archivesBaseName-${version}.jar")
			into("${project.buildDir}/libs/")
			rename { String fn -> "$archivesBaseName-${version}-maven.jar" }
		}
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}.jar")) {
					builtBy remapMavenJar
				}

				artifact(sourcesJar) {
					builtBy remapSourcesJar
				}

				pom.withXml {
					def depsNode = asNode().appendNode("dependencies")
					subprojects.each {
						def depNode = depsNode.appendNode("dependency")
						depNode.appendNode("groupId", it.group)
						depNode.appendNode("artifactId", it.name)
						depNode.appendNode("version", it.version)
						depNode.appendNode("scope", "compile")
					}
				}
			}
		}

		repositories {
			maven {
				url = 'https://lazurite.dev/maven/releases'

				credentials {
					username = project.property("publish.lazurite.alias")
					password = project.property("publish.lazurite.secret")
				}
			}
		}
	}
}

dependencies {
	include project(':rayon-core')
	include project(':rayon-entity')
	include project(':rayon-particle')
}