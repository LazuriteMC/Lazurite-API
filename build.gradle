buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.+'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version "5.2.0"
    id 'maven-publish'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'java-library'
apply plugin: 'org.spongepowered.mixin'

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

def parchmentDate = '2021.10.10'

allprojects { project ->
    apply plugin: 'net.minecraftforge.gradle'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'

    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16

    version = project.mod_version
    group = project.maven_group

    minecraft {
        mappings channel: 'parchment', version: parchmentDate + '-1.17.1'

        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

        runs {
            client {
                workingDirectory project.file('run')

                property 'forge.logging.markers', 'REGISTRIES'

                property 'forge.logging.console.level', 'debug'

                mods {
                    "${project.archivesBaseName}" {
                        source sourceSets.main
                    }
                }
            }

            server {
                workingDirectory project.file('run')

                property 'forge.logging.markers', 'REGISTRIES'

                property 'forge.logging.console.level', 'debug'

                mods {
                    "${project.archivesBaseName}" {
                        source sourceSets.main
                    }
                }
            }

            data {
                workingDirectory project.file('run')

                property 'forge.logging.markers', 'REGISTRIES'

                property 'forge.logging.console.level', 'debug'

                args '--mod', "${project.archivesBaseName}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

                mods {
                    "${project.archivesBaseName}" {
                        source sourceSets.main
                    }
                }
            }
        }
    }

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        minecraft 'net.minecraftforge:forge:1.17.1-37.0.82'
        // Bullet
        implementation "com.github.stephengold:Libbulletjme:${project.libbulletjme_version}"
        shadow "com.github.stephengold:Libbulletjme:${project.libbulletjme_version}"

        // Transporter
        implementation "dev.lazurite:transporter:${project.transporter_version}"

        // Lazurite Toolbox
        implementation "dev.lazurite:toolbox:${project.toolbox_version}"

        annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
    }

    sourceSets {
        testmod {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
        }
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("resources/META-INF/mods.toml") {
            expand "version": project.version
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = "UTF-8"
        it.options.release = 16
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allSource
    }

    java {
        withSourcesJar()
    }

    jar {
        from("LICENSE") {
            rename { "${it}_${project.archivesBaseName}" }
        }
    }

    dependencies {
        testmodImplementation project.sourceSets.main.output
    }
}

subprojects {
    publishing {
        publications {
            println archivesBaseName
            mavenJava(MavenPublication) {
                artifactId archivesBaseName
                artifact jar
            }
        }
        repositories {
            mavenLocal()
        }
    }
}